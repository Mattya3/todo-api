openapi: "3.0.0"
info:
  title: TODO API Document
  version: "0.0.1"
  description: This is TODO API Document
tags:
  - name: opts
    description: observe API
  - name: tasks
    description: tasks API
paths:
  /health:
    get:
      tags:
        - opts
      responses:
        '200':
          description: OK
  /tasks/:
    get:
      summary: "get task list"
      description: "get task list"
      operationId: "listTasks"
      tags:
        - tasks
      parameters:
        - name: limit
          in: query
          required: true
          description: "max for resource list num"
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          required: true
          description: "offset"
          schema:
            type: integer
            format: int64
            minimum: 0
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskListDTO"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
    post:
      summary: "make task"
      description: "make new task"
      operationId: "createTask"
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskForm"

      responses:
        201:
          description: "Created"
          headers:
            location:
              description: "resource's URI"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDTO"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"

  /tasks/{taskId}:
    get:
      summary: "get task"
      description: "get task by Id"
      tags:
        - tasks
      operationId: showTask
      parameters:
        - name: taskId
          in: path
          required: true
          description: "get detail for id"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDTO"
        '400':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
    put:
      summary: "update task"
      description: "update task by body"
      operationId: "editTask"
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: "target task Id"
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskForm"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDTO"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
    delete:
      summary: "delete task"
      description: "delete task by Id"
      operationId: "deleteTask"
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: "target task Id"
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: "No Content"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"

components:
  schemas:
    TaskForm:
      type: object
      properties:
        title:
          type: string
          description: "task name"
          maxLength: 256
          minLength: 1
      required:
        - title
    TaskDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "taskID"
        title:
          type: string
          description: "taskname"
      required:
        - id
        - title
    PageDTO:
      description: "page info"
      type: object
      properties:
        limit:
          description: "required limit"
          type: integer
          format: int32
        offset:
          description: "required offset"
          type: integer
          format: int64
        size:
          description: "get num"
          type: integer
          format: int32
      required:
        - limit
        - offset
        - size
    TaskListDTO:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageDTO"
        results:
          type: array
          items:
            $ref: "#/components/schemas/TaskDTO"
      required:
        - results
    ResourceNotFoundError:
      type: object
      properties:
        title:
          type: string
          description: "title Error"
          default: "Resource Not Found"
        detail:
          type: string
          description: "detail of Error"
      required:
        - title
        - detail
    BadRequestError:
      description: "bad request"
      type: object
      properties:
        title:
          type: string
          description: "error title"
          default: "Bad Request"
        detail:
          type: string
          description: "detail error"
          default: "Bad Request. Please retry correct Request"
        invalid-params:
          type: array
          items:
            $ref: "#/components/schemas/InvalidParam"
      required:
        - title
        - detail
        - invalid-params
    InvalidParam:
      description: "detail bad request"
      type: object
      properties:
        name:
          type: string
          description: "field name"
        reason:
          type: string
          description: "reason"
      required:
        - name
        - reason